/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package br.com.igreja.views.internal;

import br.com.igreja.models.Membro;
import br.com.igreja.models.dao.MembroDAO;
import br.com.igreja.util.JPAUtil;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.EntityManager;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author demi
 */
public class ListaDeAquivados extends javax.swing.JInternalFrame {

    SaidaDeMembro saida;
    
    /**
     * Creates new form ListaDeAquivados
     */
    public ListaDeAquivados() {
        initComponents();
        atualizarTabela();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabela = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();

        setClosable(true);
        setTitle("Arquivados");

        tabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "CPF"
            }
        ));
        jScrollPane1.setViewportView(tabela);

        jButton1.setText("Desarquivar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(79, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(78, 78, 78))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(0, 23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        desarquivar();
        atualizarTabela();
        saida.atualizarTabela();
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable tabela;
    // End of variables declaration//GEN-END:variables

    
    public void iniciar(SaidaDeMembro saida){
        this.saida = saida;
        this.setVisible(true);
    }
    
    String[] columnData = {"Nome", "CPF"};
    DefaultTableModel model;
    
    private void atualizarTabela(){
        EntityManager em = JPAUtil.getEntityManager();
        MembroDAO dao = new MembroDAO(em);
        model = new DefaultTableModel(columnData, 0);
        List<Membro> membros = dao.pesquisaPorArquivados();
       
        for(Membro m : membros){
           String[] rowData = {m.getNome(),m.getCpf()};
           model.addRow(rowData);
        }
       tabela.setModel(model);
    }
    
    private void desarquivar(){
        EntityManager em = JPAUtil.getEntityManager();
        MembroDAO dao = new MembroDAO(em);
        if(membroSelecinado() != -1){
            dao.desarquivar(getId());
        }else{
            JOptionPane.showMessageDialog(rootPane, "Selecione o Membro(a) que deseja arquivar.");
        }
    }
    
    private Long getId(){
        EntityManager em = JPAUtil.getEntityManager();
        MembroDAO dao = new MembroDAO(em);
        List<Membro> membrosArquivados = dao.pesquisaPorArquivados(); 
        return membrosArquivados.get(membroSelecinado()).getId();
    }
    
    // Retorna o índice do membro selecionado pelo usuário
    private int membroSelecinado(){
        EntityManager em = JPAUtil.getEntityManager();
        MembroDAO dao = new MembroDAO(em);
        int index = -1;
        for(int i = 0; i < dao.getLista().size(); i++){
            if(tabela.isRowSelected(i)){
               index = i;
            }
        }
        return index;
    }

    public SaidaDeMembro getSaida() {
        return saida;
    }
}